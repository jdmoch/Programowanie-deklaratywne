Int,Integer - typ całkowity
Float,Double - typ rzeczywisty
Char - typ znakowy
Bool - typ boolowski
String - typ listy znaków [Char]

Typ fukncji:::

nazwa_funkcji::TypParam_1->TypParam_2->...->TypParam_m-> Typ funkcji (np. Int)

if<warunek>then<true-value>else<flase-value>

case<wyrazenie>of
	<wzorzec_1>-><wartość_1>
	<wzorzec_2>-><wartość_2>
	...
	<wzorzec_n>-><wartość_n>

guard - straznicy
<warunek_1>=<wartość_1>
<warunek_2>=<wartość_2>
...
<warunek_n>=<wartość_n>
lub na koncu
otherwise = <wartość_n>

Sesja haskwel
program abs:
Main> abs 6
6.0
Main> abs (-5)
5.0
Main> abs 0
0.0

program min liczby:
Main> minimum 2 5
2.0
Main> minimum 5 (-1)
-1.0
Main> minimum 5 5
5.0
Main>

Main> minimum2 5 2
2

signum funckja:
Main> sgn 5
1.0
Main> sgn (-5)
-1.0
Main> sgn 0
0.0

program albo_albo1:::

Main> albo_albo1 (True,True)
False
Main> albo_albo1 (False,True)
True

Main> albo_albo True True
False

Main> albo_albo3 True True
False

-----------------

abs::Float->Float
abs x=if x<0 then (-x) else x

abs2 x 
 |x<0 =(-x)
 |otherwise =x

minimum::Float->Float->Float
minimum a b=if a<b then a else b

minimum2 a b 
 |a<b = a
 |otherwise = b

sgn::Float->Float
sgn x=if x>0 then 1
 	else if x<0 then (-1)
	else 0 


sgn2 x 
 |x>0 = 1
 |x<0 = (-1)
 |otherwise = 0

--funkcja albo_albo (dopasowanie do wzorca)
albo_albo1::(Bool,Bool)->Bool
albo_albo1 (p,q)=case (p,q) of (True,True)->False
			       (True,False)->True
			       (False,True)->True
			       (False,False)->False

albo_albo::Bool->Bool->Bool
albo_albo p q = if p==q then False
		else True

albo_albo3 p q
 |p==q = False
 |otherwise = True

-- albo_albo4 - and,or,not
albo_albo4::Bool->Bool->Bool
albo_albo4 p q = not p && q || p && not q

--implikacja logiczna jakas
implikacja::Bool->Bool->Bool
implikacja p q = 
		 if p==False then True
		 else if q==True then True
		 else False

--implikacja ze straznikami 
imp1 p q
 |p==True  && q==False = False 
 |otherwise = False

